version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    networks:
      - acris-net

  redis:
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      retries: 5
    networks:
      - acris-net

  airflow-init:
    build: ./airflow_image
    container_name: airflow_init
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./artifacts:/opt/airflow/artifacts
      - ./dbt:/opt/airflow/dbt
    networks:
      - acris-net
    entrypoint: /bin/bash
    command:
      - -c
      - |
        while ! nc -z postgres 5432; do
          echo "Waiting for postgres..."
          sleep 1
        done
        echo "Postgres is up and running!"
        airflow db migrate
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  airflow-webserver:
    build: ./airflow_image
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
      AIRFLOW__WEBSERVER__SECRET_KEY: b'o\xec@\x15\xbe\x0f\xe0T\xc4\xb7\xf1\x19\x1e\x90\x0c\xc4'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./artifacts:/opt/airflow/artifacts
      - ./dbt:/opt/airflow/dbt
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      start_period: 30s
      retries: 5
    networks:
      - acris-net
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    build: ./airflow_image
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
      AIRFLOW__WEBSERVER__SECRET_KEY: b'o\xec@\x15\xbe\x0f\xe0T\xc4\xb7\xf1\x19\x1e\x90\x0c\xc4'
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./artifacts:/opt/airflow/artifacts
      - ./dbt:/opt/airflow/dbt
    command: scheduler
    networks:
      - acris-net
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  airflow-worker:
    build: ./airflow_image
    environment:
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__RESULT_BACKEND: db+postgresql://airflow:airflow@postgres/airflow
      AIRFLOW__CELERY__BROKER_URL: redis://redis:6379/0
      AIRFLOW__API__AUTH_BACKENDS: airflow.api.auth.backend.basic_auth
      
    volumes:
      - ./dags:/opt/airflow/dags
      - ./data:/opt/airflow/data
      - ./artifacts:/opt/airflow/artifacts
      - ./dbt:/opt/airflow/dbt
    command: celery worker
    networks:
      - acris-net
    depends_on:
      airflow-init:
        condition: service_completed_successfully

  api:
    build: ./api
    env_file:
      - .env
    depends_on:
      airflow-webserver:
        condition: service_healthy
    environment:
      AIRFLOW_USER: admin
      AIRFLOW_PW: admin
    volumes:
      - ./api:/app
      - ./dags:/opt/airflow/dags
      - ./artifacts:/app/artifacts:ro
      - ./web/dist:/app/web/dist
    ports:
      - "8000:8000"
    networks:
      - acris-net

volumes:
  postgres-data:

networks:
  acris-net:
    driver: bridge
